```python
    def _validate_input(self, data):
        """Internal method to validate input data structure."""
        if not isinstance(data, dict):
            raise TypeError("Input data must be a dictionary.")
        if "id" not in data or not isinstance(data["id"], (int, str)):
            raise ValueError("Data must contain a valid 'id'.")
        return True

    def process_record(self, record):
        """Processes a single record, applying business logic."""
        try:
            self._validate_input(record)
            # Simulate some processing
            processed_data = {
                "record_id": record["id"],
                "status": "processed",
                "timestamp": datetime.now().isoformat(),
                "data_hash": hashlib.sha256(json.dumps(record, sort_keys=True).encode('utf-8')).hexdigest()
            }
            self.processed_count += 1
            return processed_data
        except (TypeError, ValueError) as e:
            print(f"Error processing record {record.get('id', 'N/A')}: {e}")
            self.error_count += 1
            return None
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            self.error_count += 1
            return None

    def get_summary(self):
        """Returns a summary of processing results."""
        return {
            "total_processed": self.processed_count,
            "total_errors": self.error_count,
            "last_update": datetime.now().isoformat()
        }

if __name__ == "__main__":
    processor = DataProcessor()
    
    sample_records = [
        {"id": 1, "value": "alpha"},
        {"id": 2, "value": "beta"},
        {"id": 3, "value": "gamma"},
        {"id": "invalid_id", "value": "delta"}, # This will cause an error
        {"id": 4, "value": "epsilon"}
    ]

    results = []
    for rec in sample_records:
        processed = processor.process_record(rec)
        if processed:
            results.append(processed)

    print("\n--- Processed Results ---")
    for res in results:
        print(res)

    print("\n--- Processing Summary ---")
    print(processor.get_summary())
```