{
  "기획서원문": [
    "TripKorea AI 여행 추천 시스템 기획서",
    "1. 서비스 개요",
    "사용자의 선호도, 여행 목적, 예산, 일정, 식습관 등 개인 맞춤 정보를 수집하고, AI 기반의 인터랙티브한 대화 방식으로 맞춤형 국내 여행 일정표를 생성해주는 시스템.",
    "대상: 국내여행 사용자 (1인~가족, 친구, 커플 등)",
    "여행지: 대한민국 주요 관광지",
    "특징: Gemini API 기반 정보검색 기능 탑재 + 외부 예약 연동",
    "2. 전체 기능 흐름 (시나리오 기준)",
    "Step 1. 사용자의 요청",
    "\"서울 3박 4일 일정 추천해줘“",
    "Step 2. AI가 다음 항목들을 대화형으로 질문",
    "Step 3. AI가 추천 일정지 3~5가지 제안",
    "추천에는 여행 컨셉, 예산, 시간대, 알레르기, 교통편을 반영",
    "각 안마다 핵심 활동, 예상 소요시간, 예상 비용, 대표 이미지 제공",
    "Step 4. 사용자가 “1번으로 할게요” 처럼 선택",
    "Step 5. 선택된 일정에 맞춘 세부 일정표 생성",
    "- 날짜별 타임라인",
    "- 지도 기반 동선 최적화",
    "- 맛집/명소 링크 포함",
    "- 숙소 체크인/아웃 타이밍 자동 반영",
    "항목 설명",
    "- 여행 컨셉: 관광 / 쇼핑 / 먹방 / 혼합",
    "- 숙소 형태: 호텔 / 게스트하우스 / 모텔 등",
    "- 예산: 1인당 예상 지출 (대략적)",
    "- 음식 알레르기: 19가지 항목 기준 체크박스식 (예: 땅콩, 밀, 해산물 등)",
    "- 항공편 정보: 출발 공항 / 시간, 도착 공항",
    "- 렌트카 여부: 이용 여부 (있음 / 없음)",
    "- 여행 메이트 관계: 친구 / 연인 / 가족 / 동료 등",
    "- 대중교통/렌트카 동선 포함",
    "3. Gemini API + 웹 검색 기능",
    "기능 개요:",
    "Gemini API + function calling 및 search tool 기능을 활용  ",
    "여행지 주변 정보, 식당 리뷰, 예약 링크 자동 검색 가능",
    "4. 확장 가능성",
    "- 지역 확장: 일본 등 주변국",
    "- 교통 연계: KTX/렌터카 시간표 실시간 반영",
    "- 숙소 연계: 야놀자, 여기어때 API 연동",
    "- 결제 연동: 예약 자동화 시스템 구축 가능",
    "5. 차별 포인트",
    "- 연인들을 위한 1일 서울 데이트 코스 짜주기",
    "- 1년치씩 팝업스토어 정보를 DB 구축해 일정 겹치면 추천하기",
    "- 자체 알레르기 분류 모델 + Gemini 앙상블 기법으로 정확도 향상",
    "조건별 AI 기능 출력 예시:",
    "- 일정 추천 → 내 식당 선택 검색 자동 실행 → 리뷰 요약 + 예약 링크 제공",
    "- 비건 선택 → 사찰음식 식당 + 템플스테이 검색 → 링크 포함 추천",
    "- 특정 장소 요청 (예: “카페 추천해줘”) → Gemini가 주변 인기순 추천 → 위치 + 링크"
  ],
  "기능목록": [
    {
      "기능ID": "FEAT-001",
      "기능명": "초기 여행 요청 접수",
      "기능설명": {
        "목적": "사용자로부터 여행 목적지, 기간 등 기본적인 여행 정보를 입력받아 시스템의 초기 대화를 시작합니다.",
        "핵심역할": "사용자의 자연어 요청을 파싱하여 핵심 여행 파라미터를 식별합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 여행 계획을 시작하기 위해 시스템에 첫 요청을 보냅니다.",
        "행동": "사용자가 '서울 3박 4일 일정 추천해줘'와 같이 자연어로 여행 요청을 입력합니다."
      },
      "입력값": {
        "필수": [
          "여행 목적지",
          "여행 기간"
        ],
        "선택": [
          "여행 인원",
          "여행 목적"
        ],
        "형식": "자연어 문자열"
      },
      "출력값": {
        "요약정보": "초기 요청 파라미터 (예: 서울, 3박 4일)",
        "상세정보": {
          "destination": "서울",
          "duration": "3박 4일",
          "parsed_intent": "여행 일정 추천"
        }
      },
      "처리방식": {
        "단계": [
          "사용자 입력 수신",
          "자연어 처리(NLP)를 통한 핵심 정보 추출",
          "추출된 정보 기반으로 다음 대화 단계 준비"
        ],
        "사용모델": "Gemini API (자연어 이해)"
      },
      "예외조건및처리": {
        "입력누락": "필수 정보(목적지, 기간) 누락 시, AI가 해당 정보 재질문",
        "오류": "시스템 오류 발생 시, 사용자에게 오류 메시지 출력 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "Gemini API"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "텍스트 입력창",
        "전송 버튼"
      ],
      "테스트케이스예시": [
        "정상 입력 ('서울 3박 4일 일정 추천해줘') → 목적지, 기간 정상 추출",
        "기간 누락 ('서울 일정 추천해줘') → '몇 박 며칠이신가요?' 질문 유도",
        "알 수 없는 요청 ('안녕') → '어떤 여행을 계획하시나요?' 안내 메시지 출력"
      ]
    },
    {
      "기능ID": "FEAT-002",
      "기능명": "AI 기반 대화형 상세 여행 정보 수집",
      "기능설명": {
        "목적": "사용자의 초기 요청을 바탕으로 AI가 추가적인 질문을 통해 여행 컨셉, 예산, 식습관 등 맞춤형 일정 생성을 위한 상세 정보를 대화형으로 수집합니다.",
        "핵심역할": "사용자 응답을 기반으로 필요한 정보를 순차적으로 질문하고, 수집된 정보를 구조화하여 저장합니다."
      },
      "사용자시나리오": {
        "상황": "초기 요청 후, AI가 사용자에게 여행 상세 정보를 묻습니다.",
        "행동": "사용자가 AI의 질문에 대해 '관광 위주로요', '1인당 50만원 정도', '땅콩 알레르기가 있어요' 등 답변을 입력합니다."
      },
      "입력값": {
        "필수": [
          "여행 컨셉",
          "숙소 형태",
          "예산",
          "음식 알레르기",
          "항공편 정보",
          "렌트카 여부",
          "여행 메이트 관계",
          "대중교통/렌트카 동선 포함 여부"
        ],
        "선택": [],
        "형식": "자연어 문자열, 드롭다운 선택, 체크박스 선택, 숫자"
      },
      "출력값": {
        "요약정보": "수집된 상세 여행 파라미터 목록",
        "상세정보": {
          "travel_concept": "관광",
          "accommodation_type": "호텔",
          "budget_per_person": "50만원",
          "food_allergies": [
            "땅콩",
            "밀"
          ],
          "flight_info": {
            "departure_airport": "김포",
            "arrival_airport": "제주",
            "departure_time": "10:00"
          },
          "car_rental_needed": "있음",
          "travel_mate_relation": "연인",
          "include_transport_route": "대중교통"
        }
      },
      "처리방식": {
        "단계": [
          "수집되지 않은 필수 정보 식별",
          "해당 정보에 대한 질문 생성 (Gemini API)",
          "사용자 응답 수신 및 파싱",
          "수집된 정보 유효성 검증 및 저장",
          "모든 정보 수집 완료 시 다음 단계로 전환"
        ],
        "사용모델": "Gemini API (대화 관리, 자연어 이해)"
      },
      "예외조건및처리": {
        "입력누락": "사용자가 질문에 답변하지 않거나 불완전한 답변 시, 재질문 또는 기본값 적용",
        "오류": "정보 수집 중 시스템 오류 발생 시, 대화 중단 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "Gemini API"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "텍스트 입력창",
        "AI 응답창",
        "드롭다운 메뉴",
        "체크박스"
      ],
      "테스트케이스예시": [
        "모든 질문에 정상 답변 → 모든 파라미터 수집 완료",
        "알레르기 질문에 '없음' 답변 → 알레르기 목록 비어있음",
        "예산 질문에 비정상 값 ('너무 많이') → '정확한 예산을 알려주세요' 재질문"
      ]
    },
    {
      "기능ID": "FEAT-003",
      "기능명": "AI 기반 맞춤형 여행 일정 초안 제안",
      "기능설명": {
        "목적": "수집된 사용자의 선호도와 제약 조건을 바탕으로, AI가 3~5가지의 고수준 여행 일정 초안을 생성하여 사용자에게 제안합니다.",
        "핵심역할": "입력된 파라미터를 종합적으로 고려하여 다양한 컨셉의 여행 일정 아이디어를 도출하고, 각 일정의 핵심 요소를 요약합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 모든 상세 정보를 입력한 후, AI가 여러 개의 여행 일정 초안을 제시합니다.",
        "행동": "사용자가 제시된 일정 초안들을 검토하고, 그 중 하나를 선택할 준비를 합니다."
      },
      "입력값": {
        "필수": [
          "수집된 모든 여행 파라미터 (FEAT-002의 출력값)"
        ],
        "선택": [],
        "형식": "JSON 객체 (구조화된 여행 파라미터)"
      },
      "출력값": {
        "요약정보": "3~5가지 여행 일정 초안 목록",
        "상세정보": [
          {
            "itinerary_id": "A",
            "concept": "역사 탐방",
            "key_activities": [
              "경복궁",
              "북촌 한옥마을"
            ],
            "estimated_time": "3박 4일",
            "estimated_cost": "50만원",
            "representative_image_url": "http://example.com/image_a.jpg"
          },
          {
            "itinerary_id": "B",
            "concept": "쇼핑 & 미식",
            "key_activities": [
              "명동",
              "홍대"
            ],
            "estimated_time": "3박 4일",
            "estimated_cost": "70만원",
            "representative_image_url": "http://example.com/image_b.jpg"
          }
        ]
      },
      "처리방식": {
        "단계": [
          "수집된 여행 파라미터 분석",
          "Gemini API를 활용하여 다양한 일정 컨셉 및 활동 조합 생성",
          "각 일정에 대한 예상 소요시간, 비용, 핵심 활동 추정",
          "관련 이미지 검색 및 연결"
        ],
        "사용모델": "Gemini API (콘텐츠 생성), 내부 추천 알고리즘"
      },
      "예외조건및처리": {
        "입력누락": "필수 파라미터 누락 시, 일정 생성 불가 메시지 출력 및 정보 재수집 유도",
        "오류": "일정 생성 중 시스템 오류 발생 시, 사용자에게 오류 메시지 출력 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "Gemini API",
        "이미지 검색 API"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "카드형 목록",
        "이미지",
        "텍스트 요약"
      ],
      "테스트케이스예시": [
        "모든 파라미터 정상 입력 → 3~5가지 일정 초안 정상 생성",
        "매우 제한적인 조건 (예: 예산 1만원) → '해당 조건으로는 일정 생성이 어렵습니다' 메시지 출력",
        "특정 알레르기 조건 포함 → 해당 알레르기를 고려한 식당/활동 포함 여부 확인"
      ]
    },
    {
      "기능ID": "FEAT-004",
      "기능명": "제안된 일정 요약 정보 표시",
      "기능설명": {
        "목적": "FEAT-003에서 생성된 각 여행 일정 초안에 대한 핵심 정보(컨셉, 활동, 시간, 비용, 대표 이미지)를 사용자에게 시각적으로 명확하게 제시합니다.",
        "핵심역할": "생성된 일정 데이터를 사용자 친화적인 UI 요소로 변환하여 화면에 렌더링합니다."
      },
      "사용자시나리오": {
        "상황": "AI가 여러 개의 여행 일정 초안을 제시한 후, 사용자가 각 초안의 상세 내용을 확인합니다.",
        "행동": "사용자가 제시된 일정 카드들을 스크롤하거나 클릭하여 요약 정보를 확인합니다."
      },
      "입력값": {
        "필수": [
          "FEAT-003의 출력값 (여행 일정 초안 목록)"
        ],
        "선택": [],
        "형식": "JSON 배열 (여행 일정 초안 객체)"
      },
      "출력값": {
        "요약정보": "각 일정 초안의 시각적 요약 정보",
        "상세정보": "UI에 렌더링된 카드형 일정 요약 (컨셉, 핵심 활동, 예상 소요시간, 예상 비용, 대표 이미지 포함)"
      },
      "처리방식": {
        "단계": [
          "일정 초안 데이터 수신",
          "각 초안별 UI 컴포넌트 생성",
          "데이터를 컴포넌트에 바인딩",
          "화면에 렌더링"
        ],
        "사용모델": "없음 (프론트엔드 렌더링)"
      },
      "예외조건및처리": {
        "입력누락": "일정 초안 데이터가 없을 경우, '제안할 일정이 없습니다' 메시지 출력",
        "오류": "렌더링 중 오류 발생 시, 부분적 또는 전체 UI 표시 오류 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "FEAT-003"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "카드형 UI",
        "이미지",
        "텍스트 라벨"
      ],
      "테스트케이스예시": [
        "3개 일정 초안 정상 입력 → 3개 카드 정상 표시",
        "이미지 URL 누락된 일정 → 이미지 대신 기본 아이콘 표시",
        "비용 정보 누락된 일정 → '비용 정보 없음' 표시"
      ]
    },
    {
      "기능ID": "FEAT-005",
      "기능명": "사용자 일정 선택 처리",
      "기능설명": {
        "목적": "사용자가 AI가 제안한 여러 여행 일정 초안 중 하나를 선택하면, 해당 선택을 시스템에 반영하고 다음 단계로 진행합니다.",
        "핵심역할": "사용자의 선택을 인식하고, 선택된 일정의 ID를 기반으로 상세 일정 생성을 위한 데이터를 준비합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 제시된 일정 초안들을 검토한 후, 마음에 드는 일정을 결정합니다.",
        "행동": "사용자가 '1번으로 할게요'와 같이 선택 의사를 밝히거나, 특정 일정 카드를 클릭합니다."
      },
      "입력값": {
        "필수": [
          "선택된 일정의 식별자 (ID 또는 순번)"
        ],
        "선택": [],
        "형식": "문자열 (예: '1번', 'A'), 클릭 이벤트"
      },
      "출력값": {
        "요약정보": "선택된 일정의 ID",
        "상세정보": {
          "selected_itinerary_id": "A"
        }
      },
      "처리방식": {
        "단계": [
          "사용자 선택 입력 수신",
          "입력된 식별자를 기반으로 해당 일정 초안 데이터 조회",
          "선택된 일정 데이터를 다음 단계(상세 일정 생성)로 전달"
        ],
        "사용모델": "없음"
      },
      "예외조건및처리": {
        "입력누락": "선택 정보가 없거나 유효하지 않을 경우, '다시 선택해주세요' 메시지 출력",
        "오류": "선택 처리 중 시스템 오류 발생 시, 사용자에게 오류 메시지 출력 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "FEAT-003"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "선택 버튼",
        "텍스트 입력창"
      ],
      "테스트케이스예시": [
        "유효한 일정 ID 선택 → 해당 일정 ID 정상 처리",
        "유효하지 않은 일정 ID 선택 → '유효하지 않은 선택입니다' 메시지 출력",
        "선택 없이 다음 단계 요청 → '일정을 먼저 선택해주세요' 메시지 출력"
      ]
    },
    {
      "기능ID": "FEAT-006",
      "기능명": "상세 여행 일정표 생성",
      "기능설명": {
        "목적": "사용자가 선택한 고수준 일정 초안을 기반으로, 날짜별 타임라인, 지도 기반 동선, 맛집/명소 링크, 숙소 타이밍 등을 포함한 상세하고 구체적인 여행 일정표를 생성합니다.",
        "핵심역할": "선택된 일정의 컨셉과 사용자 선호도를 바탕으로, 시간대별 활동, 이동 경로, 추천 장소 등을 포함한 완전한 여행 계획을 수립합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 초안 일정을 선택한 후, 시스템이 해당 일정의 세부 계획을 보여줍니다.",
        "행동": "사용자가 생성된 상세 일정표를 확인하고, 각 날짜별 활동, 지도, 링크 등을 탐색합니다."
      },
      "입력값": {
        "필수": [
          "선택된 여행 일정 초안 데이터",
          "수집된 모든 여행 파라미터 (FEAT-002의 출력값)"
        ],
        "선택": [],
        "형식": "JSON 객체"
      },
      "출력값": {
        "요약정보": "날짜별 상세 여행 일정표",
        "상세정보": {
          "day_1": {
            "date": "2024-07-01",
            "timeline": [
              {
                "time": "09:00",
                "activity": "경복궁 관람",
                "location": "경복궁",
                "link": "https://example.com/gyeongbokgung"
              },
              {
                "time": "12:00",
                "activity": "점심 식사",
                "location": "토속촌 삼계탕",
                "link": "https://example.com/tosokchon"
              }
            ]
          },
          "day_2": {
            "date": "2024-07-02",
            "timeline": []
          }
        }
      },
      "처리방식": {
        "단계": [
          "선택된 일정 초안 및 사용자 파라미터 분석",
          "Gemini API를 활용하여 날짜별, 시간대별 활동 계획 수립",
          "FEAT-007 (동선 최적화), FEAT-008 (맛집/명소 링크), FEAT-009 (숙소 타이밍) 기능 호출 및 결과 통합",
          "최종 상세 일정표 구조화"
        ],
        "사용모델": "Gemini API (일정 상세화), 내부 동선 최적화 알고리즘"
      },
      "예외조건및처리": {
        "입력누락": "필수 입력 데이터 누락 시, 상세 일정 생성 불가 메시지 출력",
        "오류": "일정 생성 중 시스템 오류 발생 시, 사용자에게 오류 메시지 출력 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "FEAT-005",
        "FEAT-007",
        "FEAT-008",
        "FEAT-009",
        "Gemini API"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "날짜별 탭/아코디언",
        "타임라인 뷰",
        "지도",
        "링크 버튼"
      ],
      "테스트케이스예시": [
        "정상적인 일정 선택 → 날짜별, 시간대별 상세 일정표 정상 생성",
        "숙소 정보가 없는 경우 → 숙소 체크인/아웃 타이밍 제외하고 일정 생성",
        "특정 날짜에 활동이 너무 많거나 적은 경우 → AI가 조정 제안 또는 경고"
      ]
    },
    {
      "기능ID": "FEAT-007",
      "기능명": "지도 기반 동선 최적화",
      "기능설명": {
        "목적": "생성된 상세 여행 일정 내의 각 장소(맛집, 명소, 숙소 등) 간의 이동 동선을 지도 데이터를 기반으로 최적화하여 효율적인 경로를 제공합니다.",
        "핵심역할": "일정 내 모든 POI의 위치 정보를 활용하여 최단 거리 또는 최단 시간 경로를 계산하고, 이를 일정표에 반영합니다."
      },
      "사용자시나리오": {
        "상황": "상세 일정표를 확인하는 과정에서, 사용자가 각 장소 간의 이동 경로를 효율적으로 파악하고자 합니다.",
        "행동": "사용자가 일정표 내의 지도 아이콘을 클릭하거나, 동선 최적화된 경로를 시각적으로 확인합니다."
      },
      "입력값": {
        "필수": [
          "일정 내 모든 POI의 이름 및 주소/좌표",
          "선택된 교통수단 (대중교통/렌트카)"
        ],
        "선택": [],
        "형식": "JSON 배열 (POI 객체), 문자열"
      },
      "출력값": {
        "요약정보": "최적화된 POI 방문 순서 및 이동 경로",
        "상세정보": {
          "optimized_route": [
            {
              "poi_name": "경복궁",
              "order": 1,
              "coordinates": "37.5776,126.9769"
            },
            {
              "poi_name": "북촌 한옥마을",
              "order": 2,
              "coordinates": "37.5826,126.9836"
            }
          ],
          "travel_segments": [
            {
              "from": "경복궁",
              "to": "북촌 한옥마을",
              "mode": "도보",
              "duration": "15분",
              "distance": "1.2km"
            }
          ],
          "map_data": "지도 API에서 제공하는 경로 데이터"
        }
      },
      "처리방식": {
        "단계": [
          "일정 내 POI 목록 추출 및 지리적 좌표 변환",
          "선택된 교통수단(대중교통/렌트카) 고려",
          "경로 최적화 알고리즘 (예: TSP 변형) 적용",
          "지도 API를 통해 경로 정보 및 시각화 데이터 생성"
        ],
        "사용모델": "경로 최적화 알고리즘 (예: Nearest Neighbor, Genetic Algorithm), 지도 API"
      },
      "예외조건및처리": {
        "입력누락": "POI 위치 정보 누락 시, 해당 POI는 동선 최적화에서 제외",
        "오류": "지도 API 연동 오류 또는 경로 계산 실패 시, '경로 최적화 불가' 메시지 출력 및 수동 경로 안내"
      },
      "의존성또는연동항목": [
        "지도 API (예: Google Maps API, Naver Maps API)"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "지도",
        "경로 표시선",
        "POI 마커"
      ],
      "테스트케이스예시": [
        "3개 POI 정상 입력 → 최단 거리/시간으로 동선 최적화",
        "교통수단 '대중교통' 선택 → 대중교통 경로 및 시간 반영",
        "접근 불가능한 POI 포함 → 해당 POI 제외 또는 경고 메시지 출력"
      ]
    },
    {
      "기능ID": "FEAT-008",
      "기능명": "맛집/명소 정보 및 링크 통합",
      "기능설명": {
        "목적": "상세 여행 일정표에 포함된 맛집 및 명소에 대한 추가 정보(리뷰 요약)와 외부 예약/상세 정보 링크를 자동으로 검색하여 제공합니다.",
        "핵심역할": "일정 내 POI에 대해 실시간 웹 검색을 수행하고, 관련 정보를 추출하여 일정표에 삽입합니다."
      },
      "사용자시나리오": {
        "상황": "상세 일정표를 보면서 특정 맛집이나 명소에 대해 더 자세히 알고 싶을 때.",
        "행동": "사용자가 일정표 내의 맛집/명소 링크를 클릭하여 외부 웹사이트로 이동하거나, 요약된 리뷰를 확인합니다."
      },
      "입력값": {
        "필수": [
          "일정 내 맛집/명소 이름",
          "위치 정보"
        ],
        "선택": [],
        "형식": "문자열"
      },
      "출력값": {
        "요약정보": "맛집/명소의 간략한 정보와 외부 링크",
        "상세정보": {
          "poi_name": "토속촌 삼계탕",
          "review_summary": "인삼향이 좋고 닭이 부드러움, 웨이팅 길 수 있음",
          "booking_link": "https://example.com/tosokchon_booking",
          "detail_link": "https://example.com/tosokchon_info"
        }
      },
      "처리방식": {
        "단계": [
          "일정 내 맛집/명소 목록 추출",
          "Gemini API의 search tool 기능을 활용하여 웹 검색 수행 (FEAT-011)",
          "검색 결과에서 리뷰, 예약 링크, 상세 정보 링크 추출 (FEAT-012, FEAT-013)",
          "추출된 정보를 상세 일정표에 삽입"
        ],
        "사용모델": "Gemini API (search tool, 정보 추출)"
      },
      "예외조건및처리": {
        "입력누락": "POI 이름 누락 시, 검색 불가",
        "오류": "웹 검색 실패 또는 정보 추출 오류 시, '정보를 찾을 수 없습니다' 메시지 출력 또는 링크 없이 표시"
      },
      "의존성또는연동항목": [
        "FEAT-011",
        "FEAT-012",
        "FEAT-013",
        "Gemini API"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "링크 버튼",
        "텍스트 요약"
      ],
      "테스트케이스예시": [
        "유명 맛집 검색 → 리뷰 요약 및 예약/상세 링크 정상 제공",
        "신규/정보 부족한 장소 검색 → '정보 없음' 또는 제한된 정보 제공",
        "링크가 없는 장소 → 링크 없이 정보만 표시"
      ]
    },
    {
      "기능ID": "FEAT-009",
      "기능명": "숙소 체크인/아웃 시간 자동 반영",
      "기능설명": {
        "목적": "사용자가 제공한 숙소 정보(또는 AI가 추천한 숙소)의 체크인/아웃 시간을 상세 여행 일정표에 자동으로 반영하여, 숙소 이용과 다른 활동 간의 동선을 최적화합니다.",
        "핵심역할": "숙소의 표준 체크인/아웃 시간을 파악하고, 이를 일정표의 해당 날짜에 적절히 배치합니다."
      },
      "사용자시나리오": {
        "상황": "상세 일정표를 확인할 때, 숙소 이용 시간이 다른 활동과 충돌하지 않고 자연스럽게 연결되기를 원할 때.",
        "행동": "사용자가 일정표에서 숙소 체크인/아웃 활동이 정확한 시간에 반영되어 있는지 확인합니다."
      },
      "입력값": {
        "필수": [
          "숙소 이름",
          "체크인 날짜",
          "체크아웃 날짜"
        ],
        "선택": [
          "체크인 시간",
          "체크아웃 시간"
        ],
        "형식": "문자열, 날짜, 시간"
      },
      "출력값": {
        "요약정보": "일정표에 반영된 숙소 체크인/아웃 활동",
        "상세정보": {
          "day_1": {
            "timeline": [
              {
                "time": "15:00",
                "activity": "숙소 체크인",
                "location": "호텔명"
              }
            ]
          },
          "day_4": {
            "timeline": [
              {
                "time": "11:00",
                "activity": "숙소 체크아웃",
                "location": "호텔명"
              }
            ]
          }
        }
      },
      "처리방식": {
        "단계": [
          "숙소 정보 및 날짜 파싱",
          "표준 체크인/아웃 시간 (예: 15:00, 11:00) 또는 사용자 입력 시간 적용",
          "해당 시간을 상세 일정표의 타임라인에 삽입"
        ],
        "사용모델": "없음"
      },
      "예외조건및처리": {
        "입력누락": "숙소 정보가 없을 경우, 해당 활동은 일정표에 포함되지 않음",
        "오류": "시간 정보 파싱 오류 시, 기본값 적용 또는 경고 메시지 출력"
      },
      "의존성또는연동항목": [
        "FEAT-006"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "타임라인 뷰"
      ],
      "테스트케이스예시": [
        "숙소 정보 정상 입력 → 체크인/아웃 시간 일정표에 정상 반영",
        "체크인/아웃 시간 미지정 → 기본 시간으로 반영",
        "숙소 정보 없음 → 체크인/아웃 활동 일정표에 미포함"
      ]
    },
    {
      "기능ID": "FEAT-010",
      "기능명": "Gemini API 연동 및 Function Calling",
      "기능설명": {
        "목적": "Google Gemini API와 연동하여 AI 기반의 대화, 정보 검색, 콘텐츠 생성 등 핵심 기능을 수행하고, 외부 도구(Function Calling)를 호출하여 시스템의 기능을 확장합니다.",
        "핵심역할": "시스템의 모든 AI 관련 요청을 Gemini API로 전달하고, API 응답을 처리하며, 필요에 따라 정의된 외부 함수를 실행합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 AI와 대화하거나 특정 정보를 요청할 때, 시스템 내부적으로 AI 모델과 통신이 필요할 때.",
        "행동": "사용자는 직접적으로 이 기능을 사용하지 않지만, 시스템의 모든 AI 기반 응답과 기능이 이 연동을 통해 제공됩니다."
      },
      "입력값": {
        "필수": [
          "사용자 질의",
          "시스템 컨텍스트",
          "호출할 함수 정보"
        ],
        "선택": [],
        "형식": "문자열, JSON 객체"
      },
      "출력값": {
        "요약정보": "Gemini API 응답 (텍스트, 함수 호출 요청)",
        "상세정보": {
          "text_response": "추천 일정입니다...",
          "function_call_request": {
            "function_name": "search_web",
            "arguments": {
              "query": "서울 맛집"
            }
          }
        }
      },
      "처리방식": {
        "단계": [
          "Gemini API 클라이언트 초기화",
          "사용자 질의 및 컨텍스트를 포함한 요청 전송",
          "API 응답 수신",
          "응답이 텍스트인 경우 처리",
          "응답이 Function Calling 요청인 경우, 해당 함수 실행 및 결과 다시 Gemini로 전달"
        ],
        "사용모델": "Google Gemini API"
      },
      "예외조건및처리": {
        "입력누락": "API 요청에 필수 파라미터 누락 시, API 오류 발생 및 로깅",
        "오류": "API 통신 오류, 응답 파싱 오류 시, 시스템 오류로 간주하고 사용자에게 안내"
      },
      "의존성또는연동항목": [
        "Google Gemini API"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "없음 (백엔드/미들웨어)"
      ],
      "테스트케이스예시": [
        "일반적인 질문 → Gemini API에서 텍스트 응답 정상 수신",
        "웹 검색이 필요한 질문 → search_web 함수 호출 요청 정상 수신",
        "API 키 만료 → API 인증 오류 발생 및 처리"
      ]
    },
    {
      "기능ID": "FEAT-011",
      "기능명": "실시간 웹 검색 (여행지 주변 정보)",
      "기능설명": {
        "목적": "Gemini API의 search tool 기능을 활용하여 여행지 주변의 실시간 정보(예: 식당, 명소, 이벤트)를 검색하고, 이를 AI 응답 생성에 활용합니다.",
        "핵심역할": "특정 검색 쿼리를 받아 웹 검색을 수행하고, 관련성 높은 검색 결과를 AI 모델에 제공합니다."
      },
      "사용자시나리오": {
        "상황": "AI가 사용자에게 특정 장소를 추천하거나, 사용자 요청에 따라 주변 정보를 찾아야 할 때.",
        "행동": "사용자는 직접적으로 검색 기능을 사용하지 않지만, AI가 제공하는 정보의 최신성과 정확성에 영향을 받습니다."
      },
      "입력값": {
        "필수": [
          "검색 쿼리 (예: '서울 맛집', '경복궁 주변 카페')"
        ],
        "선택": [
          "검색 지역",
          "검색 유형 (식당, 명소 등)"
        ],
        "형식": "문자열"
      },
      "출력값": {
        "요약정보": "검색 결과 요약 (상위 N개 링크 및 스니펫)",
        "상세정보": [
          {
            "title": "토속촌 삼계탕",
            "url": "http://example.com/tosokchon",
            "snippet": "경복궁 근처 유명 삼계탕 맛집"
          },
          {
            "title": "북촌 한옥마을",
            "url": "http://example.com/bukchon",
            "snippet": "전통 한옥이 보존된 마을"
          }
        ]
      },
      "처리방식": {
        "단계": [
          "Gemini API로부터 search tool 호출 요청 수신",
          "요청된 쿼리로 웹 검색 엔진 호출",
          "검색 결과 파싱 및 관련성 높은 정보 추출",
          "추출된 정보를 Gemini API로 다시 전달"
        ],
        "사용모델": "Gemini API (search tool), 외부 웹 검색 엔진"
      },
      "예외조건및처리": {
        "입력누락": "검색 쿼리 누락 시, 검색 불가",
        "오류": "웹 검색 엔진 연동 오류 또는 결과 파싱 실패 시, '정보를 찾을 수 없습니다' 메시지 반환"
      },
      "의존성또는연동항목": [
        "FEAT-010",
        "외부 웹 검색 엔진 (예: Google Search API)"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "없음 (백엔드)"
      ],
      "테스트케이스예시": [
        "정상 쿼리 ('서울 맛집') → 관련 맛집 정보 정상 검색 및 반환",
        "존재하지 않는 장소 쿼리 → 검색 결과 없음 반환",
        "네트워크 오류 → 검색 실패 메시지 반환"
      ]
    },
    {
      "기능ID": "FEAT-012",
      "기능명": "식당 리뷰 요약 및 제공",
      "기능설명": {
        "목적": "FEAT-011을 통해 검색된 식당 정보에서 사용자 리뷰를 추출하고, 핵심 내용을 요약하여 사용자에게 제공합니다.",
        "핵심역할": "다수의 리뷰 텍스트를 분석하여 긍정/부정 키워드, 특징 등을 요약하고, 이를 AI 응답에 포함시킵니다."
      },
      "사용자시나리오": {
        "상황": "AI가 특정 식당을 추천할 때, 사용자가 해당 식당의 실제 방문객 평가를 알고 싶을 때.",
        "행동": "사용자가 AI가 제공하는 식당 정보 내의 '리뷰 요약'을 읽습니다."
      },
      "입력값": {
        "필수": [
          "식당 이름",
          "검색된 리뷰 텍스트 데이터"
        ],
        "선택": [],
        "형식": "문자열, 텍스트 배열"
      },
      "출력값": {
        "요약정보": "식당 리뷰의 핵심 요약",
        "상세정보": {
          "restaurant_name": "토속촌 삼계탕",
          "review_summary": "인삼향이 좋고 닭이 부드러움, 웨이팅 길 수 있음, 김치 맛있음",
          "sentiment": "긍정적"
        }
      },
      "처리방식": {
        "단계": [
          "FEAT-011에서 전달된 검색 결과(리뷰 페이지 URL 등) 파싱",
          "리뷰 텍스트 추출",
          "자연어 처리(NLP)를 통한 핵심 키워드 및 감성 분석",
          "요약문 생성"
        ],
        "사용모델": "Gemini API (텍스트 요약, 감성 분석)"
      },
      "예외조건및처리": {
        "입력누락": "리뷰 텍스트가 없을 경우, '리뷰 정보 없음' 메시지 반환",
        "오류": "리뷰 파싱 또는 요약 중 오류 발생 시, '리뷰 요약 불가' 메시지 반환"
      },
      "의존성또는연동항목": [
        "FEAT-011",
        "Gemini API"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "텍스트 블록"
      ],
      "테스트케이스예시": [
        "리뷰가 많은 식당 → 핵심 내용이 잘 요약되어 제공",
        "리뷰가 적은 식당 → '리뷰가 충분하지 않습니다' 메시지 또는 짧은 요약 제공",
        "부정적인 리뷰가 많은 식당 → 부정적인 측면이 요약에 포함"
      ]
    },
    {
      "기능ID": "FEAT-013",
      "기능명": "예약 링크 자동 검색 및 제공",
      "기능설명": {
        "목적": "추천된 맛집이나 명소에 대한 외부 예약 링크를 자동으로 검색하여 사용자에게 제공함으로써, 편리한 예약 경험을 지원합니다.",
        "핵심역할": "웹 검색 결과에서 예약 관련 URL을 식별하고, 이를 사용자에게 직접 연결할 수 있도록 제공합니다."
      },
      "사용자시나리오": {
        "상황": "AI가 추천한 식당이나 활동에 대해 바로 예약하고 싶을 때.",
        "행동": "사용자가 AI가 제공하는 '예약 링크'를 클릭하여 외부 예약 사이트로 이동합니다."
      },
      "입력값": {
        "필수": [
          "맛집/명소 이름",
          "검색된 웹 페이지 URL 목록"
        ],
        "선택": [],
        "형식": "문자열, URL 배열"
      },
      "출력값": {
        "요약정보": "해당 장소의 예약 링크",
        "상세정보": {
          "poi_name": "토속촌 삼계탕",
          "booking_link": "https://booking.naver.com/tosokchon"
        }
      },
      "처리방식": {
        "단계": [
          "FEAT-011에서 전달된 검색 결과 URL 목록 분석",
          "각 URL에서 '예약', 'reservation', 'booking' 등의 키워드 및 패턴 식별",
          "유효한 예약 링크 추출 및 반환"
        ],
        "사용모델": "Gemini API (정보 추출), 정규표현식 기반 파서"
      },
      "예외조건및처리": {
        "입력누락": "검색된 URL이 없을 경우, 예약 링크 제공 불가",
        "오류": "링크 추출 실패 시, '예약 링크를 찾을 수 없습니다' 메시지 반환"
      },
      "의존성또는연동항목": [
        "FEAT-011",
        "Gemini API"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "링크 버튼"
      ],
      "테스트케이스예시": [
        "예약 시스템이 잘 갖춰진 식당 → 예약 링크 정상 제공",
        "예약 시스템이 없는 장소 → 예약 링크 미제공",
        "잘못된 형식의 링크 → 링크 필터링 또는 오류 처리"
      ]
    },
    {
      "기능ID": "FEAT-014",
      "기능명": "팝업스토어 정보 DB 구축 및 추천",
      "기능설명": {
        "목적": "최신 팝업스토어 정보를 자체 데이터베이스로 구축하고, 사용자의 여행 일정과 겹치거나 관심사에 부합하는 팝업스토어를 추천합니다.",
        "핵심역할": "팝업스토어 정보를 수집, 저장, 관리하며, 사용자 일정 및 선호도에 기반하여 관련 팝업스토어를 필터링하고 추천합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 특정 기간에 여행을 계획할 때, 해당 기간에 열리는 흥미로운 팝업스토어를 알고 싶을 때.",
        "행동": "AI가 일정표에 팝업스토어 정보를 포함하여 추천하거나, 사용자가 팝업스토어 추천을 요청합니다."
      },
      "입력값": {
        "필수": [
          "여행 기간",
          "여행 지역",
          "사용자 관심사 (선택적)"
        ],
        "선택": [],
        "형식": "날짜 범위, 문자열, 드롭다운"
      },
      "출력값": {
        "요약정보": "추천 팝업스토어 목록",
        "상세정보": [
          {
            "name": "OOO 팝업스토어",
            "location": "서울 성수동",
            "period": "2024-07-01 ~ 2024-07-15",
            "description": "인기 캐릭터 굿즈 판매 및 체험",
            "link": "http://example.com/popup_ooo"
          }
        ]
      },
      "처리방식": {
        "단계": [
          "정기적인 팝업스토어 정보 수집 (웹 크롤링, 수동 입력 등)",
          "수집된 정보 DB에 저장 및 관리",
          "사용자 요청 및 일정과 팝업스토어 DB 비교",
          "관련성 높은 팝업스토어 필터링 및 추천"
        ],
        "사용모델": "내부 DB, 추천 알고리즘"
      },
      "예외조건및처리": {
        "입력누락": "여행 기간/지역 누락 시, 광범위한 팝업스토어 정보 제공 또는 추천 불가",
        "오류": "DB 조회 오류 또는 정보 불일치 시, '팝업스토어 정보 없음' 메시지 출력"
      },
      "의존성또는연동항목": [
        "내부 팝업스토어 DB"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "리스트",
        "카드형 UI",
        "링크"
      ],
      "테스트케이스예시": [
        "여행 기간 내에 열리는 팝업스토어 정상 추천",
        "여행 기간 외 팝업스토어는 추천에서 제외",
        "DB에 팝업스토어 정보가 없는 경우 → '현재 추천할 팝업스토어가 없습니다' 메시지 출력"
      ]
    },
    {
      "기능ID": "FEAT-015",
      "기능명": "자체 알레르기 분류 모델 연동",
      "기능설명": {
        "목적": "사용자가 입력한 음식 알레르기 정보를 자체 분류 모델로 분석하여, Gemini API와 앙상블 기법으로 더욱 정확하고 안전한 식당/음식 추천을 제공합니다.",
        "핵심역할": "사용자의 알레르기 정보를 정밀하게 분류하고, 이를 기반으로 식당 및 메뉴 추천 시 해당 알레르기 유발 요소를 필터링하거나 경고합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 음식 알레르기를 가지고 있어, AI가 추천하는 식당이나 음식이 안전한지 확인하고 싶을 때.",
        "행동": "사용자는 알레르기 정보를 입력하고, AI가 해당 알레르기를 고려한 식당을 추천하는 것을 확인합니다."
      },
      "입력값": {
        "필수": [
          "사용자 음식 알레르기 목록 (예: 땅콩, 밀, 해산물 등)"
        ],
        "선택": [],
        "형식": "체크박스 선택 (19가지 항목 기준)"
      },
      "출력값": {
        "요약정보": "분류된 알레르기 유형 및 추천 필터링 기준",
        "상세정보": {
          "classified_allergens": [
            "땅콩",
            "글루텐"
          ],
          "recommendation_filters": {
            "exclude_ingredients": [
              "땅콩",
              "밀"
            ],
            "include_tags": [
              "글루텐프리"
            ]
          }
        }
      },
      "처리방식": {
        "단계": [
          "사용자 알레르기 입력 수신",
          "자체 알레르기 분류 모델을 통해 입력된 알레르기 항목 정밀 분류",
          "분류된 알레르기 정보를 Gemini API로 전달하여 추천 로직에 반영",
          "Gemini API의 추천 결과와 자체 모델의 필터링 결과를 앙상블하여 최종 추천"
        ],
        "사용모델": "자체 알레르기 분류 모델, Gemini API"
      },
      "예외조건및처리": {
        "입력누락": "알레르기 정보 미입력 시, 알레르기 필터링 없이 추천 진행",
        "오류": "분류 모델 오류 시, 알레르기 필터링 기능 비활성화 또는 경고 메시지 출력"
      },
      "의존성또는연동항목": [
        "Gemini API",
        "내부 알레르기 DB"
      ],
      "기능우선순위": "높음",
      "UI요소": [
        "체크박스 목록"
      ],
      "테스트케이스예시": [
        "땅콩 알레르기 선택 → 땅콩이 포함된 식당/메뉴 추천에서 제외",
        "복수 알레르기 선택 → 모든 알레르기 고려하여 추천",
        "알레르기 정보 없음 → 알레르기 필터링 없이 추천"
      ]
    },
    {
      "기능ID": "FEAT-016",
      "기능명": "특정 장소 유형(예: 카페) 추천 (주변 인기순)",
      "기능설명": {
        "목적": "사용자가 '카페 추천해줘'와 같이 특정 장소 유형을 요청할 경우, 현재 위치 또는 지정된 위치 주변의 인기 있는 해당 유형의 장소를 검색하여 추천합니다.",
        "핵심역할": "사용자 요청에서 장소 유형을 식별하고, 지도 API 및 웹 검색을 통해 주변 인기 장소를 찾아 위치 및 링크와 함께 제공합니다."
      },
      "사용자시나리오": {
        "상황": "여행 중 특정 유형의 장소(예: 카페, 서점)를 방문하고 싶을 때.",
        "행동": "사용자가 AI에게 '주변 카페 추천해줘'라고 요청하고, AI가 인기순으로 카페 목록을 제시하는 것을 확인합니다."
      },
      "입력값": {
        "필수": [
          "장소 유형 (예: 카페, 박물관)",
          "기준 위치 (현재 위치 또는 지정 위치)"
        ],
        "선택": [
          "추천 기준 (예: 인기순, 평점순)"
        ],
        "형식": "자연어 문자열, 좌표"
      },
      "출력값": {
        "요약정보": "추천 장소 목록 (이름, 위치, 링크)",
        "상세정보": [
          {
            "name": "블루보틀 삼청점",
            "location": "서울 종로구 북촌로5길 76",
            "rating": 4.5,
            "link": "https://example.com/bluebottle"
          },
          {
            "name": "스타벅스 경복궁점",
            "location": "서울 종로구 사직로 130",
            "rating": 4.2,
            "link": "https://example.com/starbucks"
          }
        ]
      },
      "처리방식": {
        "단계": [
          "사용자 요청에서 장소 유형 및 기준 위치 추출",
          "Gemini API의 search tool 기능을 활용하여 웹 검색 및 지도 API 연동",
          "검색 결과에서 인기순 또는 평점순으로 필터링",
          "장소 이름, 위치, 링크를 포함하여 추천 결과 생성"
        ],
        "사용모델": "Gemini API (search tool, 정보 추출), 지도 API"
      },
      "예외조건및처리": {
        "입력누락": "장소 유형 또는 기준 위치 누락 시, 재질문 또는 추천 불가 메시지 출력",
        "오류": "검색 또는 API 연동 오류 시, '추천 장소를 찾을 수 없습니다' 메시지 출력"
      },
      "의존성또는연동항목": [
        "FEAT-010",
        "FEAT-011",
        "지도 API"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "리스트",
        "링크 버튼",
        "지도"
      ],
      "테스트케이스예시": [
        "정상 요청 ('카페 추천해줘') → 주변 인기 카페 목록 정상 추천",
        "특정 지역 요청 ('강남역 주변 맛집 추천해줘') → 해당 지역 맛집 추천",
        "정보가 부족한 장소 유형 요청 → '해당 유형의 장소를 찾기 어렵습니다' 메시지 출력"
      ]
    },
    {
      "기능ID": "FEAT-017",
      "기능명": "비건/특정 식단 기반 POI 추천",
      "기능설명": {
        "목적": "사용자가 비건, 채식, 할랄 등 특정 식단 선호도를 입력할 경우, 해당 식단에 부합하는 식당 및 관련 명소(예: 사찰음식 식당, 템플스테이)를 검색하여 추천합니다.",
        "핵심역할": "식단 선호도를 기반으로 POI 데이터베이스 및 웹 검색을 필터링하여, 적합한 식당과 활동을 찾아 제공합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 특정 식단(예: 비건)을 따르며, 이에 맞는 식당이나 체험을 찾고 싶을 때.",
        "행동": "사용자가 '비건 식당 추천해줘'라고 요청하거나, 초기 정보 수집 시 '비건'을 선택하고, AI가 이에 맞는 추천을 제공하는 것을 확인합니다."
      },
      "입력값": {
        "필수": [
          "식단 선호도 (예: 비건, 채식, 할랄)",
          "여행 지역"
        ],
        "선택": [],
        "형식": "문자열, 드롭다운"
      },
      "출력값": {
        "요약정보": "식단에 맞는 식당/명소 목록 및 링크",
        "상세정보": [
          {
            "name": "사찰음식점 발우공양",
            "location": "서울 종로구 우정국로 56",
            "type": "비건 식당",
            "link": "https://example.com/balwoo"
          },
          {
            "name": "조계사 템플스테이",
            "location": "서울 종로구 우정국로 55",
            "type": "체험",
            "link": "https://example.com/jogyesa"
          }
        ]
      },
      "처리방식": {
        "단계": [
          "사용자 식단 선호도 및 여행 지역 수신",
          "내부 POI DB 및 Gemini API의 search tool을 활용하여 해당 식단 관련 식당/명소 검색",
          "검색 결과 필터링 및 관련 정보(링크 포함) 추출",
          "추천 결과 생성"
        ],
        "사용모델": "Gemini API (search tool, 정보 추출), 내부 POI DB"
      },
      "예외조건및처리": {
        "입력누락": "식단 선호도 또는 지역 누락 시, 재질문 또는 일반 추천 진행",
        "오류": "검색 또는 DB 조회 오류 시, '해당 식단에 맞는 장소를 찾을 수 없습니다' 메시지 출력"
      },
      "의존성또는연동항목": [
        "FEAT-010",
        "FEAT-011",
        "내부 POI DB"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "리스트",
        "링크 버튼"
      ],
      "테스트케이스예시": [
        "비건 선택 → 비건 식당 및 템플스테이 정상 추천",
        "특정 지역에서 비건 식당이 없는 경우 → '해당 지역에는 비건 식당이 부족합니다' 메시지 출력",
        "할랄 선택 → 할랄 인증 식당 추천"
      ]
    },
    {
      "기능ID": "FEAT-018",
      "기능명": "실시간 교통편(KTX/렌터카) 시간표 연동",
      "기능설명": {
        "목적": "KTX 및 렌터카 서비스의 실시간 시간표 및 이용 가능 정보를 연동하여, 여행 일정에 정확한 교통편 정보를 반영하고 예약 편의성을 높입니다.",
        "핵심역할": "외부 교통편 API를 호출하여 실시간 운행 정보, 좌석 현황, 렌터카 재고 등을 조회하고, 이를 일정표에 통합합니다."
      },
      "사용자시나리오": {
        "상황": "여행 일정에 KTX나 렌터카 이용이 포함될 때, 정확한 시간과 예약 가능 여부를 알고 싶을 때.",
        "행동": "사용자가 일정표에서 KTX/렌터카 이용 시간을 확인하거나, 예약 링크를 통해 바로 예약 사이트로 이동합니다."
      },
      "입력값": {
        "필수": [
          "출발지",
          "도착지",
          "날짜",
          "시간",
          "교통편 유형 (KTX/렌터카)"
        ],
        "선택": [
          "인원수",
          "차량 종류 (렌터카)"
        ],
        "형식": "문자열, 날짜, 시간, 숫자"
      },
      "출력값": {
        "요약정보": "실시간 교통편 시간표 및 예약 가능 여부",
        "상세정보": {
          "transport_type": "KTX",
          "departure_station": "서울역",
          "arrival_station": "부산역",
          "departure_time": "10:00",
          "arrival_time": "12:40",
          "available_seats": 20,
          "booking_link": "https://www.letskorail.com"
        }
      },
      "처리방식": {
        "단계": [
          "사용자 요청 또는 일정에 포함된 교통편 정보 추출",
          "해당 교통편 서비스의 API 호출",
          "실시간 시간표, 요금, 예약 가능 여부 등 데이터 수신",
          "수신된 정보를 일정표에 반영 및 예약 링크 제공"
        ],
        "사용모델": "없음 (API 연동)"
      },
      "예외조건및처리": {
        "입력누락": "필수 정보 누락 시, 조회 불가 메시지 출력",
        "오류": "외부 API 연동 오류 또는 데이터 불일치 시, '교통편 정보 조회 불가' 메시지 출력"
      },
      "의존성또는연동항목": [
        "KTX API (코레일), 렌터카 업체 API"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "시간표 리스트",
        "예약 링크 버튼"
      ],
      "테스트케이스예시": [
        "KTX 시간표 정상 조회 → 출발/도착 시간, 잔여 좌석 정상 표시",
        "렌터카 특정 차종 조회 → 해당 차종 재고 및 요금 정상 표시",
        "매진된 KTX 노선 조회 → '매진' 메시지 및 다른 시간대 추천"
      ]
    },
    {
      "기능ID": "FEAT-019",
      "기능명": "숙소 예약 플랫폼 API 연동",
      "기능설명": {
        "목적": "야놀자, 여기어때 등 주요 숙소 예약 플랫폼의 API와 연동하여, 추천된 숙소의 실시간 가격, 예약 가능 여부, 상세 정보를 제공하고 직접 예약으로 연결합니다.",
        "핵심역할": "사용자에게 추천된 숙소에 대한 최신 정보를 외부 예약 플랫폼에서 조회하고, 예약 페이지로의 직접적인 링크를 제공합니다."
      },
      "사용자시나리오": {
        "상황": "AI가 추천한 숙소에 대해 실시간 가격과 예약 가능 여부를 확인하고 바로 예약하고 싶을 때.",
        "행동": "사용자가 일정표 내 숙소 정보에서 '예약하기' 버튼을 클릭하여 외부 예약 플랫폼으로 이동합니다."
      },
      "입력값": {
        "필수": [
          "숙소 이름",
          "체크인 날짜",
          "체크아웃 날짜",
          "인원수"
        ],
        "선택": [
          "객실 유형"
        ],
        "형식": "문자열, 날짜, 숫자"
      },
      "출력값": {
        "요약정보": "숙소 실시간 가격, 예약 가능 여부, 예약 링크",
        "상세정보": {
          "hotel_name": "서울 신라호텔",
          "check_in": "2024-07-01",
          "check_out": "2024-07-04",
          "price": "300,000원/박",
          "availability": "가능",
          "booking_link": "https://www.yanolja.com/hotel/shilla"
        }
      },
      "처리방식": {
        "단계": [
          "추천된 숙소 정보 및 사용자 입력 날짜/인원 추출",
          "야놀자/여기어때 등 숙소 예약 플랫폼 API 호출",
          "실시간 가격, 객실 정보, 예약 가능 여부 수신",
          "수신된 정보를 일정표에 반영 및 예약 링크 제공"
        ],
        "사용모델": "없음 (API 연동)"
      },
      "예외조건및처리": {
        "입력누락": "필수 정보 누락 시, 조회 불가 메시지 출력",
        "오류": "외부 API 연동 오류 또는 데이터 불일치 시, '숙소 정보 조회 불가' 메시지 출력"
      },
      "의존성또는연동항목": [
        "야놀자 API",
        "여기어때 API"
      ],
      "기능우선순위": "중간",
      "UI요소": [
        "가격 표시",
        "예약 가능 여부 텍스트",
        "예약 버튼"
      ],
      "테스트케이스예시": [
        "숙소 정보 정상 조회 → 실시간 가격 및 예약 가능 여부 정상 표시",
        "만실인 숙소 조회 → '만실' 메시지 및 다른 숙소 추천",
        "API 연동 오류 → '숙소 정보 조회에 실패했습니다' 메시지 출력"
      ]
    },
    {
      "기능ID": "FEAT-020",
      "기능명": "자동화된 예약 및 결제 시스템 연동",
      "기능설명": {
        "목적": "사용자가 선택한 여행 일정 내의 숙소, 교통편, 액티비티 등에 대한 예약을 시스템 내에서 직접 자동화하고 결제까지 연동하여 원스톱 서비스를 제공합니다.",
        "핵심역할": "선택된 항목에 대한 예약 요청을 외부 예약 시스템으로 전달하고, 결제 모듈을 통해 결제를 처리하며, 예약 확정 정보를 사용자에게 전달합니다."
      },
      "사용자시나리오": {
        "상황": "사용자가 확정된 여행 일정의 모든 예약을 한 번에 처리하고 싶을 때.",
        "행동": "사용자가 '일정 전체 예약하기' 버튼을 클릭하고, 결제 정보를 입력하여 예약을 완료합니다."
      },
      "입력값": {
        "필수": [
          "예약할 항목 목록 (숙소, 교통편, 액티비티)",
          "사용자 결제 정보 (카드 정보 등)"
        ],
        "선택": [
          "할인 코드"
        ],
        "형식": "JSON 배열, 문자열, 숫자"
      },
      "출력값": {
        "요약정보": "예약 및 결제 성공/실패 여부",
        "상세정보": {
          "reservation_status": "성공",
          "transaction_id": "TXN-12345",
          "booked_items": [
            {
              "item_name": "서울 신라호텔",
              "status": "확정"
            },
            {
              "item_name": "KTX 서울-부산",
              "status": "확정"
            }
          ]
        }
      },
      "처리방식": {
        "단계": [
          "예약할 항목 목록 및 사용자 결제 정보 수신",
          "각 항목별 외부 예약 API 호출 (FEAT-018, FEAT-019 등 활용)",
          "결제 게이트웨이 연동 및 결제 처리",
          "예약 및 결제 결과 확인 및 사용자에게 알림"
        ],
        "사용모델": "없음 (API 연동, 결제 모듈)"
      },
      "예외조건및처리": {
        "입력누락": "필수 결제 정보 누락 시, 결제 진행 불가",
        "오류": "예약 API 오류, 결제 실패, 네트워크 오류 시, 해당 항목 예약 실패 메시지 및 재시도 안내"
      },
      "의존성또는연동항목": [
        "FEAT-018",
        "FEAT-019",
        "결제 게이트웨이 API"
      ],
      "기능우선순위": "낮음",
      "UI요소": [
        "예약 버튼",
        "결제 정보 입력 폼",
        "결제 완료/실패 메시지"
      ],
      "테스트케이스예시": [
        "모든 항목 정상 예약 및 결제 → '예약 및 결제가 완료되었습니다' 메시지 출력",
        "카드 정보 오류 → '결제에 실패했습니다' 메시지 출력",
        "일부 항목 예약 실패 → 실패 항목 명시 및 성공 항목만 예약 완료"
      ]
    }
  ]
}