# Generated by Django 5.2.4 on 2025-08-02 03:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='People',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'people',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OutputDocument',
            fields=[
                ('OutputDocument', models.AutoField(primary_key=True, serialize=False)),
                ('doc_type', models.CharField(choices=[('기능명세서', '기능명세서'), ('업무분단표', '업무분단표'), ('로드맥', '로드맥')], max_length=20)),
                ('file_path', models.CharField(max_length=255)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTimeline',
            fields=[
                ('ProjectTimeline', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auto_app.project')),
            ],
        ),
        migrations.CreateModel(
            name='RequirementDraft',
            fields=[
                ('RequirementDraft_id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(choices=[('gemini_1', 'Gemini 1 (GAN)'), ('gemini_2', 'Gemini 2 (A2A)')], max_length=20)),
                ('feature_name', models.CharField(max_length=100)),
                ('summary', models.TextField()),
                ('score_by_model', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.project')),
            ],
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('Requirement', models.AutoField(primary_key=True, serialize=False)),
                ('feature_name', models.CharField(max_length=255)),
                ('summary', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=20, null=True)),
                ('score_by_model', models.FloatField(blank=True, null=True)),
                ('confirmed_by_user', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.project')),
                ('selected_from_draft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auto_app.requirementdraft')),
            ],
        ),
        migrations.CreateModel(
            name='SimilarProject',
            fields=[
                ('SimilarProject', models.AutoField(primary_key=True, serialize=False)),
                ('repo_name', models.CharField(max_length=100)),
                ('repo_url', models.URLField()),
                ('language', models.CharField(max_length=50)),
                ('stars', models.IntegerField()),
                ('similarity_score', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.project')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('TeamMember', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('role', models.CharField(max_length=50)),
                ('skills', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.project')),
            ],
        ),
        migrations.CreateModel(
            name='TaskAssignment',
            fields=[
                ('TaskAssignment', models.AutoField(primary_key=True, serialize=False)),
                ('auto_assigned', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.requirement')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto_app.teammember')),
            ],
        ),
    ]
